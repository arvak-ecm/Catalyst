/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as Base64LayoutImport } from './routes/base64/_layout'
import { Route as ApistreamLayoutImport } from './routes/apistream/_layout'
import { Route as ApistreamLayoutEnviromentIndexImport } from './routes/apistream/_layout.enviroment/index'
import { Route as ApistreamLayoutCollectionIndexImport } from './routes/apistream/_layout.collection/index'

// Create Virtual Routes

const Base64Import = createFileRoute('/base64')()
const ApistreamImport = createFileRoute('/apistream')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const Base64Route = Base64Import.update({
  id: '/base64',
  path: '/base64',
  getParentRoute: () => rootRoute,
} as any)

const ApistreamRoute = ApistreamImport.update({
  id: '/apistream',
  path: '/apistream',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const Base64LayoutRoute = Base64LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => Base64Route,
} as any)

const ApistreamLayoutRoute = ApistreamLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => ApistreamRoute,
} as any)

const ApistreamLayoutEnviromentIndexRoute =
  ApistreamLayoutEnviromentIndexImport.update({
    id: '/enviroment/',
    path: '/enviroment/',
    getParentRoute: () => ApistreamLayoutRoute,
  } as any)

const ApistreamLayoutCollectionIndexRoute =
  ApistreamLayoutCollectionIndexImport.update({
    id: '/collection/',
    path: '/collection/',
    getParentRoute: () => ApistreamLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/apistream': {
      id: '/apistream'
      path: '/apistream'
      fullPath: '/apistream'
      preLoaderRoute: typeof ApistreamImport
      parentRoute: typeof rootRoute
    }
    '/apistream/_layout': {
      id: '/apistream/_layout'
      path: '/apistream'
      fullPath: '/apistream'
      preLoaderRoute: typeof ApistreamLayoutImport
      parentRoute: typeof ApistreamRoute
    }
    '/base64': {
      id: '/base64'
      path: '/base64'
      fullPath: '/base64'
      preLoaderRoute: typeof Base64Import
      parentRoute: typeof rootRoute
    }
    '/base64/_layout': {
      id: '/base64/_layout'
      path: '/base64'
      fullPath: '/base64'
      preLoaderRoute: typeof Base64LayoutImport
      parentRoute: typeof Base64Route
    }
    '/apistream/_layout/collection/': {
      id: '/apistream/_layout/collection/'
      path: '/collection'
      fullPath: '/apistream/collection'
      preLoaderRoute: typeof ApistreamLayoutCollectionIndexImport
      parentRoute: typeof ApistreamLayoutImport
    }
    '/apistream/_layout/enviroment/': {
      id: '/apistream/_layout/enviroment/'
      path: '/enviroment'
      fullPath: '/apistream/enviroment'
      preLoaderRoute: typeof ApistreamLayoutEnviromentIndexImport
      parentRoute: typeof ApistreamLayoutImport
    }
  }
}

// Create and export the route tree

interface ApistreamLayoutRouteChildren {
  ApistreamLayoutCollectionIndexRoute: typeof ApistreamLayoutCollectionIndexRoute
  ApistreamLayoutEnviromentIndexRoute: typeof ApistreamLayoutEnviromentIndexRoute
}

const ApistreamLayoutRouteChildren: ApistreamLayoutRouteChildren = {
  ApistreamLayoutCollectionIndexRoute: ApistreamLayoutCollectionIndexRoute,
  ApistreamLayoutEnviromentIndexRoute: ApistreamLayoutEnviromentIndexRoute,
}

const ApistreamLayoutRouteWithChildren = ApistreamLayoutRoute._addFileChildren(
  ApistreamLayoutRouteChildren,
)

interface ApistreamRouteChildren {
  ApistreamLayoutRoute: typeof ApistreamLayoutRouteWithChildren
}

const ApistreamRouteChildren: ApistreamRouteChildren = {
  ApistreamLayoutRoute: ApistreamLayoutRouteWithChildren,
}

const ApistreamRouteWithChildren = ApistreamRoute._addFileChildren(
  ApistreamRouteChildren,
)

interface Base64RouteChildren {
  Base64LayoutRoute: typeof Base64LayoutRoute
}

const Base64RouteChildren: Base64RouteChildren = {
  Base64LayoutRoute: Base64LayoutRoute,
}

const Base64RouteWithChildren =
  Base64Route._addFileChildren(Base64RouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/apistream': typeof ApistreamLayoutRouteWithChildren
  '/base64': typeof Base64LayoutRoute
  '/apistream/collection': typeof ApistreamLayoutCollectionIndexRoute
  '/apistream/enviroment': typeof ApistreamLayoutEnviromentIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/apistream': typeof ApistreamLayoutRouteWithChildren
  '/base64': typeof Base64LayoutRoute
  '/apistream/collection': typeof ApistreamLayoutCollectionIndexRoute
  '/apistream/enviroment': typeof ApistreamLayoutEnviromentIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/apistream': typeof ApistreamRouteWithChildren
  '/apistream/_layout': typeof ApistreamLayoutRouteWithChildren
  '/base64': typeof Base64RouteWithChildren
  '/base64/_layout': typeof Base64LayoutRoute
  '/apistream/_layout/collection/': typeof ApistreamLayoutCollectionIndexRoute
  '/apistream/_layout/enviroment/': typeof ApistreamLayoutEnviromentIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/apistream'
    | '/base64'
    | '/apistream/collection'
    | '/apistream/enviroment'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/apistream'
    | '/base64'
    | '/apistream/collection'
    | '/apistream/enviroment'
  id:
    | '__root__'
    | '/'
    | '/apistream'
    | '/apistream/_layout'
    | '/base64'
    | '/base64/_layout'
    | '/apistream/_layout/collection/'
    | '/apistream/_layout/enviroment/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ApistreamRoute: typeof ApistreamRouteWithChildren
  Base64Route: typeof Base64RouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ApistreamRoute: ApistreamRouteWithChildren,
  Base64Route: Base64RouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/apistream",
        "/base64"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/apistream": {
      "filePath": "apistream",
      "children": [
        "/apistream/_layout"
      ]
    },
    "/apistream/_layout": {
      "filePath": "apistream/_layout.tsx",
      "parent": "/apistream",
      "children": [
        "/apistream/_layout/collection/",
        "/apistream/_layout/enviroment/"
      ]
    },
    "/base64": {
      "filePath": "base64",
      "children": [
        "/base64/_layout"
      ]
    },
    "/base64/_layout": {
      "filePath": "base64/_layout.tsx",
      "parent": "/base64"
    },
    "/apistream/_layout/collection/": {
      "filePath": "apistream/_layout.collection/index.tsx",
      "parent": "/apistream/_layout"
    },
    "/apistream/_layout/enviroment/": {
      "filePath": "apistream/_layout.enviroment/index.tsx",
      "parent": "/apistream/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
